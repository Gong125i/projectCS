const pool = require('./config/database');

async function createPendingAppointments() {
  try {
    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå...\n');

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    const projectsResult = await pool.query(`
      SELECT p.id, p.name, p.advisor_id,
             ps.student_id,
             u.first_name as student_first_name,
             u.last_name as student_last_name
      FROM projects p
      JOIN project_students ps ON p.id = ps.project_id
      JOIN users u ON ps.student_id = u.id
      WHERE p.archived IS NULL OR p.archived = FALSE
      ORDER BY p.id
      LIMIT 5
    `);

    if (projectsResult.rows.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤');
      return;
    }

    console.log(`üìÅ ‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ ${projectsResult.rows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤\n`);

    const appointments = [];
    const today = new Date();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ pending ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
    for (const project of projectsResult.rows) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á 2-3 ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
      const numAppointments = Math.floor(Math.random() * 2) + 2; // 2-3 ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢

      console.log(`üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: ${project.name}`);
      console.log(`   ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${project.student_first_name} ${project.student_last_name}`);

      for (let i = 0; i < numAppointments; i++) {
        // ‡∏™‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï (1-7 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤)
        const randomDays = Math.floor(Math.random() * 7) + 1;
        const appointmentDate = new Date(today);
        appointmentDate.setDate(today.getDate() + randomDays);

        // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤
        const hours = Math.floor(Math.random() * 7) + 9; // 9-15 ‡∏ô.
        const minutes = Math.random() < 0.5 ? '00' : '30';
        const time = `${hours.toString().padStart(2, '0')}:${minutes}`;

        // ‡∏™‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
        const locations = [
          '‡∏´‡πâ‡∏≠‡∏á CS-301',
          '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° 1',
          '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå',
          '‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå',
          'Microsoft Teams',
          'Google Meet'
        ];
        const location = locations[Math.floor(Math.random() * locations.length)];

        // ‡∏™‡∏∏‡πà‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        const titles = [
          '‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ',
          '‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏ö‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ',
          '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤',
          '‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠ Prototype',
          '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Requirement',
          '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤',
          '‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢',
          '‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ'
        ];
        const title = titles[Math.floor(Math.random() * titles.length)];

        // ‡∏™‡∏∏‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
        const notes = [
          '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö',
          '‡∏Ç‡∏≠‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ',
          '‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤',
          '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
          '',
          '‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö'
        ];
        const note = notes[Math.floor(Math.random() * notes.length)];

        appointments.push({
          projectId: project.id,
          projectName: project.name,
          advisorId: project.advisor_id,
          studentId: project.student_id,
          studentName: `${project.student_first_name} ${project.student_last_name}`,
          date: appointmentDate.toISOString().split('T')[0],
          time,
          location,
          title,
          notes: note,
          status: 'pending' // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        });
      }
    }

    console.log(`\n‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á ${appointments.length} ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô\n`);

    // Insert appointments
    let created = 0;
    let failed = 0;

    for (const apt of appointments) {
      try {
        await pool.query(
          `INSERT INTO appointments (
            title, date, time, location, notes,
            student_id, advisor_id, project_id, status
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)`,
          [
            apt.title,
            apt.date,
            apt.time,
            apt.location,
            apt.notes,
            apt.studentId,
            apt.advisorId,
            apt.projectId,
            apt.status
          ]
        );
        created++;
        console.log(`‚úì ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢: ${apt.title}`);
        console.log(`  ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: ${apt.projectName}`);
        console.log(`  ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${apt.studentName}`);
        console.log(`  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${apt.date} ${apt.time}`);
        console.log(`  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô\n`);
      } catch (error) {
        failed++;
        console.error(`‚úó ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${apt.title} - ${error.message}`);
      }
    }

    console.log(`\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:`);
    console.log(`   ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${created} ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢`);
    console.log(`   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${failed} ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢`);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const statsResult = await pool.query(`
      SELECT 
        status, 
        COUNT(*) as count 
      FROM appointments 
      WHERE status = 'pending'
      GROUP BY status
    `);

    console.log(`\nüìà ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: ${statsResult.rows[0]?.count || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await pool.end();
  }
}

createPendingAppointments();

