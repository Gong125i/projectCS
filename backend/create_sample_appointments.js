const pool = require('./config/database');

async function createSampleAppointments() {
  try {
    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...\n');

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const projectsResult = await pool.query(`
      SELECT p.id, p.name, p.advisor_id, 
             array_agg(ps.student_id) as student_ids
      FROM projects p
      LEFT JOIN project_students ps ON p.id = ps.project_id
      WHERE p.archived IS NULL OR p.archived = FALSE
      GROUP BY p.id, p.name, p.advisor_id
      ORDER BY p.id
      LIMIT 10
    `);

    const projects = projectsResult.rows;
    console.log(`üìÅ ‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ ${projects.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);

    const appointments = [];
    const today = new Date();

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ ‡∏™‡∏£‡πâ‡∏≤‡∏á 3-5 ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
    for (const project of projects) {
      const numAppointments = Math.floor(Math.random() * 3) + 3; // 3-5 ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
      
      console.log(`üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: ${project.name}`);

      for (let i = 0; i < numAppointments; i++) {
        // ‡∏™‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á 30 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤)
        const randomDays = Math.floor(Math.random() * 60) - 30;
        const appointmentDate = new Date(today);
        appointmentDate.setDate(today.getDate() + randomDays);

        // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤
        const hours = Math.floor(Math.random() * 7) + 9; // 9-15 ‡∏ô.
        const minutes = Math.random() < 0.5 ? '00' : '30';
        const time = `${hours.toString().padStart(2, '0')}:${minutes}`;

        // ‡∏™‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
        const locations = [
          '‡∏´‡πâ‡∏≠‡∏á CS-301',
          '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° 1',
          '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå',
          '‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå',
          '‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î ‡∏ä‡∏±‡πâ‡∏ô 3',
          'Microsoft Teams',
          'Google Meet',
          'Zoom Meeting'
        ];
        const location = locations[Math.floor(Math.random() * locations.length)];

        // ‡∏™‡∏∏‡πà‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        const titles = [
          '‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏ö‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ',
          '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤',
          '‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏ú‡∏•‡∏á‡∏≤‡∏ô',
          '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î',
          '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤',
          '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Bug',
          '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö',
          '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡∏°',
          '‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢',
          '‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏á‡∏≤‡∏ô'
        ];
        const title = titles[Math.floor(Math.random() * titles.length)];

        // ‡∏™‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏î‡∏µ‡∏ï = completed/failed, ‡∏ñ‡πâ‡∏≤‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï = pending/confirmed)
        let status;
        if (randomDays < -3) {
          // ‡∏≠‡∏î‡∏µ‡∏ï
          status = Math.random() < 0.8 ? 'completed' : 'failed';
        } else if (randomDays < 0) {
          // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
          status = Math.random() < 0.7 ? 'completed' : 'failed';
        } else if (randomDays < 3) {
          // ‡πÉ‡∏Å‡∏•‡πâ‡πÜ
          status = Math.random() < 0.6 ? 'confirmed' : 'pending';
        } else {
          // ‡πÑ‡∏Å‡∏•‡πÜ
          status = Math.random() < 0.4 ? 'confirmed' : 'pending';
        }

        // ‡∏™‡∏∏‡πà‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
        const notes = [
          '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢',
          '‡∏ô‡∏≥‡πÅ‡∏ü‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏°‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢',
          '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏ú‡∏•‡∏á‡∏≤‡∏ô',
          '‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Software ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô',
          '',
          '',
          '‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ô‡∏∞',
          '‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å!'
        ];
        const note = notes[Math.floor(Math.random() * notes.length)];

        appointments.push({
          projectId: project.id,
          projectName: project.name,
          advisorId: project.advisor_id,
          studentId: project.student_ids && project.student_ids[0] !== null ? project.student_ids[0] : null,
          date: appointmentDate.toISOString().split('T')[0],
          time,
          location,
          title,
          notes: note,
          status
        });
      }
    }

    console.log(`\n‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á ${appointments.length} ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢\n`);

    // Insert appointments
    let created = 0;
    let failed = 0;

    for (const apt of appointments) {
      try {
        await pool.query(
          `INSERT INTO appointments (
            title, date, time, location, notes, 
            student_id, advisor_id, project_id, status
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)`,
          [
            apt.title,
            apt.date,
            apt.time,
            apt.location,
            apt.notes,
            apt.studentId,
            apt.advisorId,
            apt.projectId,
            apt.status
          ]
        );
        created++;
        console.log(`‚úì ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢: ${apt.title} - ${apt.projectName} (${apt.date} ${apt.time}) [${apt.status}]`);
      } catch (error) {
        failed++;
        console.error(`‚úó ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${apt.title} - ${error.message}`);
      }
    }

    console.log(`\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:`);
    console.log(`   ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${created} ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢`);
    console.log(`   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${failed} ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢`);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const statsResult = await pool.query(`
      SELECT 
        status, 
        COUNT(*) as count 
      FROM appointments 
      GROUP BY status 
      ORDER BY status
    `);

    console.log(`\nüìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:`);
    statsResult.rows.forEach(row => {
      console.log(`   ${row.status}: ${row.count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    });

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await pool.end();
  }
}

createSampleAppointments();

