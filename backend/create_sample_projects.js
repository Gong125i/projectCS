const pool = require('./config/database');

async function createSampleProjects() {
  try {
    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...\n');

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤
    const advisorsResult = await pool.query(`
      SELECT id, first_name, last_name 
      FROM users 
      WHERE role = 'advisor' 
      ORDER BY id 
      LIMIT 5
    `);

    if (advisorsResult.rows.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    const advisors = advisorsResult.rows;
    console.log(`üë®‚Äçüè´ ‡∏û‡∏ö‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå ${advisors.length} ‡∏Ñ‡∏ô\n`);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    const studentsResult = await pool.query(`
      SELECT id, first_name, last_name, student_id 
      FROM users 
      WHERE role = 'student' 
      ORDER BY id
    `);

    if (studentsResult.rows.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    const students = studentsResult.rows;
    console.log(`üë®‚Äçüéì ‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ${students.length} ‡∏Ñ‡∏ô\n`);

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    const projectTemplates = [
      {
        name: '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå',
        academicYear: '2567',
        semester: '1'
      },
      {
        name: '‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•',
        academicYear: '2567',
        semester: '1'
      },
      {
        name: '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå',
        academicYear: '2567',
        semester: '1'
      },
      {
        name: '‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•',
        academicYear: '2567',
        semester: '1'
      },
      {
        name: '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ Smart Inventory',
        academicYear: '2567',
        semester: '1'
      },
      {
        name: '‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå EduConnect',
        academicYear: '2567',
        semester: '2'
      },
      {
        name: '‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•',
        academicYear: '2567',
        semester: '2'
      },
      {
        name: '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ Project Management Pro',
        academicYear: '2567',
        semester: '2'
      },
      {
        name: '‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ FitMatch',
        academicYear: '2567',
        semester: '2'
      },
      {
        name: '‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ FoodFinder AI',
        academicYear: '2567',
        semester: '2'
      }
    ];

    let projectCount = 0;
    let studentIndex = 0;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
    for (const template of projectTemplates) {
      try {
        // ‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤
        const advisor = advisors[Math.floor(Math.random() * advisors.length)];

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
        const projectResult = await pool.query(
          `INSERT INTO projects (
            name, advisor_id, academic_year, semester, created_at, updated_at
          ) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
          RETURNING id, name`,
          [template.name, advisor.id, template.academicYear, template.semester]
        );

        const project = projectResult.rows[0];
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: ${project.name}`);
        console.log(`   ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤: ${advisor.first_name} ${advisor.last_name}`);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ 2-3 ‡∏Ñ‡∏ô ‡∏ï‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
        const numStudents = Math.floor(Math.random() * 2) + 2; // 2-3 ‡∏Ñ‡∏ô
        const projectStudents = [];

        for (let i = 0; i < numStudents && studentIndex < students.length; i++) {
          const student = students[studentIndex];
          
          try {
            await pool.query(
              `INSERT INTO project_students (project_id, student_id, created_at)
               VALUES ($1, $2, CURRENT_TIMESTAMP)`,
              [project.id, student.id]
            );
            
            projectStudents.push(student);
            console.log(`   üë®‚Äçüéì ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${student.first_name} ${student.last_name} (${student.student_id})`);
            studentIndex++;
          } catch (error) {
            console.log(`   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏î‡πâ: ${error.message}`);
          }
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ô‡∏µ‡πâ
        await createAppointmentsForProject(project.id, advisor.id, projectStudents);

        projectCount++;
        console.log('');

      } catch (error) {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ ${template.name}: ${error.message}\n`);
      }
    }

    console.log(`\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:`);
    console.log(`   ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${projectCount} ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ`);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const stats = await pool.query(`
      SELECT 
        COUNT(DISTINCT p.id) as total_projects,
        COUNT(DISTINCT ps.student_id) as total_students_in_projects,
        COUNT(a.id) as total_appointments
      FROM projects p
      LEFT JOIN project_students ps ON p.id = ps.project_id
      LEFT JOIN appointments a ON p.id = a.project_id
      WHERE p.archived IS NULL OR p.archived = FALSE
    `);

    console.log(`\nüìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö:`);
    console.log(`   ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.rows[0].total_projects}`);
    console.log(`   ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: ${stats.rows[0].total_students_in_projects}`);
    console.log(`   ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.rows[0].total_appointments}`);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    await pool.end();
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
async function createAppointmentsForProject(projectId, advisorId, students) {
  if (students.length === 0) return;

  const today = new Date();
  const numAppointments = Math.floor(Math.random() * 3) + 3; // 3-5 ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢

  const titles = [
    '‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏ö‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ',
    '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤',
    '‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏ú‡∏•‡∏á‡∏≤‡∏ô Sprint 1',
    '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î Code Review',
    '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤',
    '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Bug ‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
    '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö UAT',
    '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡∏° Weekly Meeting',
    '‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏ú‡∏•‡∏á‡∏≤‡∏ô',
    '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô Sprint ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ'
  ];

  const locations = [
    '‡∏´‡πâ‡∏≠‡∏á CS-301',
    '‡∏´‡πâ‡∏≠‡∏á CS-302', 
    '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° 1',
    '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå',
    '‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå',
    'Microsoft Teams',
    'Google Meet',
    'Zoom Meeting'
  ];

  const notes = [
    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢',
    '‡∏ô‡∏≥‡πÅ‡∏ü‡πâ‡∏°‡∏™‡∏∞‡∏™‡∏°‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢',
    '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Demo ‡∏ú‡∏•‡∏á‡∏≤‡∏ô',
    '‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Software ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô',
    '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Presentation Slide',
    '‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ô‡∏≥‡πÇ‡∏Ñ‡πâ‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢',
    '',
    ''
  ];

  for (let i = 0; i < numAppointments; i++) {
    // ‡∏™‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (-30 ‡∏ñ‡∏∂‡∏á +30 ‡∏ß‡∏±‡∏ô)
    const randomDays = Math.floor(Math.random() * 60) - 30;
    const appointmentDate = new Date(today);
    appointmentDate.setDate(today.getDate() + randomDays);

    // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ (9:00-16:00)
    const hours = Math.floor(Math.random() * 8) + 9;
    const minutes = Math.random() < 0.5 ? '00' : '30';
    const time = `${hours.toString().padStart(2, '0')}:${minutes}`;

    // ‡∏™‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    let status;
    if (randomDays < -3) {
      status = Math.random() < 0.8 ? 'completed' : 'failed';
    } else if (randomDays < 0) {
      status = Math.random() < 0.7 ? 'completed' : 'failed';
    } else if (randomDays < 3) {
      status = Math.random() < 0.6 ? 'confirmed' : 'pending';
    } else {
      status = Math.random() < 0.4 ? 'confirmed' : 'pending';
    }

    const title = titles[Math.floor(Math.random() * titles.length)];
    const location = locations[Math.floor(Math.random() * locations.length)];
    const note = notes[Math.floor(Math.random() * notes.length)];

    // ‡∏™‡∏∏‡πà‡∏°‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
    const student = students[Math.floor(Math.random() * students.length)];

    try {
      await pool.query(
        `INSERT INTO appointments (
          title, date, time, location, notes, 
          student_id, advisor_id, project_id, status, created_at, updated_at
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)`,
        [
          title,
          appointmentDate.toISOString().split('T')[0],
          time,
          location,
          note,
          student.id,
          advisorId,
          projectId,
          status
        ]
      );
    } catch (error) {
      // Ignore duplicate errors
    }
  }
}

// Run
createSampleProjects();
