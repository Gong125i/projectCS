📊 แผนภาพ Class Diagram ระบบนัดหมาย - แบบครบถ้วน 100% (ส่วนที่ 1)
================================================================

🏗️ ส่วนประกอบหน้าบ้าน (Frontend Components)
==========================================

### 1. App (แอปพลิเคชันหลัก)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                    App                                          │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + router: Router                                                                │
│ + authContext: AuthContext                                                      │
│ + notificationContext: NotificationContext                                      │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + render(): void                                                                │
│ + setupRoutes(): void                                                           │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `render()`: แสดงผลส่วนประกอบหลักของแอปพลิเคชันพร้อมการกำหนดเส้นทาง
- `setupRoutes()`: กำหนดค่าเส้นทางทั้งหมดของแอปพลิเคชันและการนำทาง

### 2. AuthContext (บริบทการยืนยันตัวตน)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                AuthContext                                     │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + user: User | null                                                             │
│ + loading: boolean                                                              │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + login(credentials: LoginCredentials): Promise<void>                           │
│ + logout(): void                                                                │
│ + updateUser(userData: Partial<User>): void                                     │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `login(credentials)`: ยืนยันตัวตนผู้ใช้ด้วยรหัสนักศึกษาและรหัสผ่าน
- `logout()`: ล้างเซสชันผู้ใช้และเปลี่ยนเส้นทางไปหน้าเข้าสู่ระบบ
- `updateUser(userData)`: อัปเดตข้อมูลผู้ใช้ในสถานะ

### 3. NotificationContext (บริบทการแจ้งเตือน)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                            NotificationContext                                 │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + notifications: Notification[]                                                 │
│ + unreadCount: number                                                           │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + markAsRead(notificationId: string): Promise<void>                             │
│ + markAllAsRead(): Promise<void>                                                │
│ + refreshNotifications(): Promise<void>                                         │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `markAsRead(notificationId)`: ทำเครื่องหมายการแจ้งเตือนว่าอ่านแล้ว
- `markAllAsRead()`: ทำเครื่องหมายการแจ้งเตือนทั้งหมดว่าอ่านแล้ว
- `refreshNotifications()`: รีเฟรชการแจ้งเตือนจาก API

### 4. Layout (เลย์เอาต์หลัก)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                  Layout                                        │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + user: User                                                                    │
│ + isSidebarOpen: boolean                                                        │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + toggleSidebar(): void                                                         │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `toggleSidebar()`: เปิด/ปิดการแสดงผลแถบด้านข้าง
- `render()`: แสดงผลเลย์เอาต์หลักพร้อมการนำทาง

### 5. ProtectedRoute (เส้นทางป้องกัน)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                              ProtectedRoute                                    │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + children: React.ReactNode                                                     │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `render()`: ตรวจสอบการเข้าสู่ระบบก่อนแสดงเนื้อหา

## 📄 ส่วนประกอบหน้าเว็บ (Page Components)
==========================================

### 6. Login (หน้าเข้าสู่ระบบ)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                  Login                                         │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + user: string                                                                  │
│ + password: string                                                              │
│ + isLoading: boolean                                                            │
│ + error: string                                                                 │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + handleSubmit(event: React.FormEvent): void                                    │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `handleSubmit(event)`: จัดการการส่งฟอร์มเข้าสู่ระบบพร้อมการตรวจสอบ
- `render()`: แสดงผลฟอร์มเข้าสู่ระบบพร้อมการจัดการข้อผิดพลาด

### 7. Dashboard (แดชบอร์ด)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                Dashboard                                       │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + upcomingAppointments: Appointment[]                                           │
│ + recentProjects: Project[]                                                     │
│ + notifications: Notification[]                                                 │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + fetchData(): Promise<void>                                                    │
│ + handleStatusChange(appointmentId: string, status: string): Promise<void>      │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `fetchData()`: ดึงข้อมูลแดชบอร์ด (การนัดหมาย, โปรเจค, การแจ้งเตือน)
- `handleStatusChange(appointmentId, status)`: อัปเดตสถานะการนัดหมาย
- `render()`: แสดงผลแดชบอร์ดพร้อมสถิติและการดำเนินการด่วน

### 8. Users (หน้าจัดการผู้ใช้)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                  Users                                         │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + users: User[]                                                                 │
│ + isLoading: boolean                                                            │
│ + selectedFile: File                                                            │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + fetchUsers(): Promise<void>                                                   │
│ + handleImport(file: File): Promise<void>                                       │
│ + deleteUser(id: string): Promise<void>                                         │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `fetchUsers()`: ดึงข้อมูลผู้ใช้ทั้งหมดจาก API
- `handleImport(file)`: นำเข้าผู้ใช้จากไฟล์ CSV
- `deleteUser(id)`: ลบผู้ใช้ตาม ID
- `render()`: แสดงผลส่วนติดต่อการจัดการผู้ใช้

### 9. Projects (หน้าจัดการโปรเจค)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                Projects                                        │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + projects: Project[]                                                           │
│ + users: User[]                                                                 │
│ + isLoading: boolean                                                            │
│ + showCreateModal: boolean                                                      │
│ + showEditModal: boolean                                                        │
│ + showInviteModal: boolean                                                      │
│ + selectedProject: Project | null                                               │
│ + formData: { name: string }                                                    │
│ + inviteStudentId: string                                                       │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + fetchData(): Promise<void>                                                    │
│ + handleCreateProject(e: React.FormEvent): Promise<void>                        │
│ + handleUpdateProject(e: React.FormEvent): Promise<void>                        │
│ + handleDeleteProject(id: string): Promise<void>                                │
│ + handleInviteStudent(projectId: string, studentId: string): Promise<void>      │
│ + handleRemoveStudent(projectId: string, studentId: string): Promise<void>      │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `fetchData()`: ดึงข้อมูลโปรเจคและผู้ใช้
- `handleCreateProject(e)`: สร้างโปรเจคใหม่
- `handleUpdateProject(e)`: อัปเดตข้อมูลโปรเจค
- `handleDeleteProject(id)`: ลบโปรเจคตาม ID
- `handleInviteStudent(projectId, studentId)`: เชิญนักศึกษาเข้าร่วมโปรเจค
- `handleRemoveStudent(projectId, studentId)`: ลบนักศึกษาออกจากโปรเจค
- `render()`: แสดงผลส่วนติดต่อการจัดการโปรเจค

### 10. ProjectDetail (หน้ารายละเอียดโปรเจค)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                              ProjectDetail                                     │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + project: Project                                                              │
│ + appointments: Appointment[]                                                   │
│ + students: User[]                                                              │
│ + editingNotes: string                                                          │
│ + notesText: string                                                             │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + fetchData(): Promise<void>                                                    │
│ + handleEditNotes(id: string, notes: string): void                             │
│ + handleSaveNotes(id: string): Promise<void>                                    │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `fetchData()`: ดึงข้อมูลรายละเอียดโปรเจค, การนัดหมาย, และนักศึกษา
- `handleEditNotes(id, notes)`: เริ่มแก้ไขโน๊ตการนัดหมาย
- `handleSaveNotes(id)`: บันทึกโน๊ตการนัดหมายลงฐานข้อมูล
- `render()`: แสดงผลรายละเอียดโปรเจคพร้อมการจัดการการนัดหมาย

### 11. Appointments (หน้าจัดการการนัดหมาย)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                              Appointments                                      │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + appointments: Appointment[]                                                   │
│ + isLoading: boolean                                                            │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + fetchAppointments(): Promise<void>                                            │
│ + createAppointment(data: any): Promise<void>                                   │
│ + updateAppointmentStatus(id: string, status: string): Promise<void>            │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `fetchAppointments()`: ดึงข้อมูลการนัดหมายของผู้ใช้
- `createAppointment(data)`: สร้างการนัดหมายใหม่
- `updateAppointmentStatus(id, status)`: อัปเดตสถานะการนัดหมาย
- `render()`: แสดงผลส่วนติดต่อการจัดการการนัดหมาย

### 12. Profile (หน้าโปรไฟล์)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                  Profile                                       │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + isEditing: boolean                                                            │
│ + loading: boolean                                                              │
│ + formData: { firstName: string, lastName: string, phone: string,              │
│              email: string, office: string }                                    │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + handleSubmit(e: React.FormEvent): Promise<void>                               │
│ + handleCancel(): void                                                          │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `handleSubmit(e)`: บันทึกการแก้ไขโปรไฟล์
- `handleCancel()`: ยกเลิกการแก้ไขโปรไฟล์
- `render()`: แสดงผลหน้าโปรไฟล์พร้อมฟอร์มแก้ไข

### 13. Notifications (หน้าการแจ้งเตือน)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                              Notifications                                     │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + getNotificationIcon(type: string): JSX                                        │
│ + getNotificationTypeText(type: string): string                                 │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `getNotificationIcon(type)`: แสดงไอคอนตามประเภทการแจ้งเตือน
- `getNotificationTypeText(type)`: แสดงข้อความประเภทการแจ้งเตือน
- `render()`: แสดงผลหน้าการแจ้งเตือน

### 14. ChangePassword (หน้าเปลี่ยนรหัสผ่าน)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                            ChangePassword                                      │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + formData: { currentPassword: string, newPassword: string,                     │
│              confirmPassword: string }                                          │
│ + showPasswords: { current: boolean, new: boolean, confirm: boolean }          │
│ + loading: boolean                                                              │
│ + error: string                                                                 │
│ + success: boolean                                                              │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + handleInputChange(e: React.ChangeEvent<HTMLInputElement>): void               │
│ + togglePasswordVisibility(field: string): void                                 │
│ + validateForm(): boolean                                                       │
│ + handleSubmit(e: React.FormEvent): Promise<void>                               │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `handleInputChange(e)`: จัดการการเปลี่ยนแปลงข้อมูลในฟอร์ม
- `togglePasswordVisibility(field)`: เปิด/ปิดการแสดงรหัสผ่าน
- `validateForm()`: ตรวจสอบความถูกต้องของฟอร์ม
- `handleSubmit(e)`: ส่งข้อมูลเปลี่ยนรหัสผ่าน
- `render()`: แสดงผลหน้าเปลี่ยนรหัสผ่าน

### 15. ResetPassword (หน้ารีเซ็ตรหัสผ่าน)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                            ResetPassword                                       │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + formData: { user: string, newPassword: string, confirmPassword: string }      │
│ + showPasswords: { new: boolean, confirm: boolean }                            │
│ + loading: boolean                                                              │
│ + error: string                                                                 │
│ + success: boolean                                                              │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + handleInputChange(e: React.ChangeEvent<HTMLInputElement>): void               │
│ + togglePasswordVisibility(field: string): void                                 │
│ + validateForm(): boolean                                                       │
│ + handleSubmit(e: React.FormEvent): Promise<void>                               │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `handleInputChange(e)`: จัดการการเปลี่ยนแปลงข้อมูลในฟอร์ม
- `togglePasswordVisibility(field)`: เปิด/ปิดการแสดงรหัสผ่าน
- `validateForm()`: ตรวจสอบความถูกต้องของฟอร์ม
- `handleSubmit(e)`: ส่งข้อมูลรีเซ็ตรหัสผ่าน
- `render()`: แสดงผลหน้ารีเซ็ตรหัสผ่าน

### 16. Statistics (หน้าสถิติ)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                              Statistics                                        │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + appointments: Appointment[]                                                   │
│ + projects: Project[]                                                           │
│ + users: User[]                                                                 │
│ + loading: boolean                                                              │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + fetchData(): Promise<void>                                                    │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `fetchData()`: ดึงข้อมูลสถิติ (การนัดหมาย, โปรเจค, ผู้ใช้)
- `render()`: แสดงผลหน้าสถิติพร้อมกราฟและตาราง

---
**หมายเหตุ: นี่เป็นส่วนที่ 1 ของแผนภาพ Class Diagram ที่ครบถ้วน 100%**
