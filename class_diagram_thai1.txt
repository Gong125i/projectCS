# แผนภาพคลาส - ระบบจัดการการนัดหมาย (ภาษาไทย)

## 🏗️ ส่วนประกอบหน้าบ้าน (Frontend Components)

### 1. App (แอปพลิเคชันหลัก)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                    App                                          │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + router: Router                                                                │
│ + authContext: AuthContext                                                      │
│ + notificationContext: NotificationContext                                      │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + render(): void                                                                │
│ + setupRoutes(): void                                                           │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `render()`: แสดงผลส่วนประกอบหลักของแอปพลิเคชันพร้อมการกำหนดเส้นทาง
- `setupRoutes()`: กำหนดค่าเส้นทางทั้งหมดของแอปพลิเคชันและการนำทาง

### 2. AuthContext (บริบทการยืนยันตัวตน)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                AuthContext                                     │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + user: User                                                                    │
│ + token: string                                                                 │
│ + isLoading: boolean                                                            │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + login(credentials): Promise<void>                                             │
│ + logout(): void                                                                │
│ + getCurrentUser(): Promise<User>                                               │
│ + changePassword(current, new): Promise<void>                                   │
│ + resetPassword(user, new): Promise<void>                                       │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `login(credentials)`: ยืนยันตัวตนผู้ใช้ด้วยรหัสนักศึกษาและรหัสผ่าน
- `logout()`: ล้างเซสชันผู้ใช้และเปลี่ยนเส้นทางไปหน้าเข้าสู่ระบบ
- `getCurrentUser()`: ดึงข้อมูลผู้ใช้ปัจจุบันจาก API
- `changePassword(current, new)`: เปลี่ยนรหัสผ่านผู้ใช้พร้อมการตรวจสอบ
- `resetPassword(user, new)`: รีเซ็ตรหัสผ่านโดยใช้รหัสนักศึกษา

### 3. NotificationContext (บริบทการแจ้งเตือน)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                            NotificationContext                                 │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + notifications: Notification[]                                                 │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + addNotification(notification): void                                           │
│ + removeNotification(id): void                                                  │
│ + markAsRead(id): void                                                          │
│ + clearAll(): void                                                              │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `addNotification(notification)`: เพิ่มการแจ้งเตือนใหม่ในรายการ
- `removeNotification(id)`: ลบการแจ้งเตือนตาม ID
- `markAsRead(id)`: ทำเครื่องหมายการแจ้งเตือนว่าอ่านแล้ว
- `clearAll()`: ล้างการแจ้งเตือนทั้งหมด

### 4. Layout (เลย์เอาต์หลัก)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                  Layout                                        │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + user: User                                                                    │
│ + isSidebarOpen: boolean                                                        │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + toggleSidebar(): void                                                         │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `toggleSidebar()`: เปิด/ปิดการแสดงผลแถบด้านข้าง
- `render()`: แสดงผลเลย์เอาต์หลักพร้อมการนำทาง

## 📄 ส่วนประกอบหน้าเว็บ (Page Components)

### 5. Login (หน้าเข้าสู่ระบบ)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                  Login                                         │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + user: string                                                                  │
│ + password: string                                                              │
│ + isLoading: boolean                                                            │
│ + error: string                                                                 │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + handleSubmit(event): void                                                     │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `handleSubmit(event)`: จัดการการส่งฟอร์มเข้าสู่ระบบพร้อมการตรวจสอบ
- `render()`: แสดงผลฟอร์มเข้าสู่ระบบพร้อมการจัดการข้อผิดพลาด

### 6. Dashboard (แดชบอร์ด)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                Dashboard                                       │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + upcomingAppointments: Appointment[]                                           │
│ + recentProjects: Project[]                                                     │
│ + notifications: Notification[]                                                 │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + fetchData(): Promise<void>                                                    │
│ + handleStatusChange(appointmentId, status): Promise<void>                      │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `fetchData()`: ดึงข้อมูลแดชบอร์ด (การนัดหมาย, โปรเจค, การแจ้งเตือน)
- `handleStatusChange(appointmentId, status)`: อัปเดตสถานะการนัดหมาย
- `render()`: แสดงผลแดชบอร์ดพร้อมสถิติและการดำเนินการด่วน

### 7. Users (หน้าจัดการผู้ใช้)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                  Users                                         │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + users: User[]                                                                 │
│ + isLoading: boolean                                                            │
│ + selectedFile: File                                                            │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + fetchUsers(): Promise<void>                                                   │
│ + handleImport(file): Promise<void>                                             │
│ + deleteUser(id): Promise<void>                                                 │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `fetchUsers()`: ดึงข้อมูลผู้ใช้ทั้งหมดจาก API
- `handleImport(file)`: นำเข้าผู้ใช้จากไฟล์ CSV
- `deleteUser(id)`: ลบผู้ใช้ตาม ID
- `render()`: แสดงผลส่วนติดต่อการจัดการผู้ใช้

### 8. Projects (หน้าจัดการโปรเจค)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                Projects                                        │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + projects: Project[]                                                           │
│ + isLoading: boolean                                                            │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + fetchProjects(): Promise<void>                                                │
│ + createProject(data): Promise<void>                                            │
│ + deleteProject(id): Promise<void>                                              │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `fetchProjects()`: ดึงข้อมูลโปรเจคของผู้ใช้
- `createProject(data)`: สร้างโปรเจคใหม่
- `deleteProject(id)`: ลบโปรเจคตาม ID
- `render()`: แสดงผลส่วนติดต่อการจัดการโปรเจค

### 9. ProjectDetail (หน้ารายละเอียดโปรเจค)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                              ProjectDetail                                     │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + project: Project                                                              │
│ + appointments: Appointment[]                                                   │
│ + students: User[]                                                              │
│ + editingNotes: string                                                          │
│ + notesText: string                                                             │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + fetchData(): Promise<void>                                                    │
│ + handleEditNotes(id, notes): void                                              │
│ + handleSaveNotes(id): Promise<void>                                            │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `fetchData()`: ดึงข้อมูลรายละเอียดโปรเจค, การนัดหมาย, และนักศึกษา
- `handleEditNotes(id, notes)`: เริ่มแก้ไขโน๊ตการนัดหมาย
- `handleSaveNotes(id)`: บันทึกโน๊ตการนัดหมายลงฐานข้อมูล
- `render()`: แสดงผลรายละเอียดโปรเจคพร้อมการจัดการการนัดหมาย

### 10. Appointments (หน้าจัดการการนัดหมาย)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                              Appointments                                      │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + appointments: Appointment[]                                                   │
│ + isLoading: boolean                                                            │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + fetchAppointments(): Promise<void>                                            │
│ + createAppointment(data): Promise<void>                                        │
│ + updateAppointmentStatus(id, status): Promise<void>                            │
│ + render(): JSX                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `fetchAppointments()`: ดึงข้อมูลการนัดหมายของผู้ใช้
- `createAppointment(data)`: สร้างการนัดหมายใหม่
- `updateAppointmentStatus(id, status)`: อัปเดตสถานะการนัดหมาย
- `render()`: แสดงผลส่วนติดต่อการจัดการการนัดหมาย

## 🔌 บริการ API (API Services)

### 11. ApiService (บริการฐาน)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                              ApiService (Base)                                 │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + baseURL: string                                                               │
│ + token: string                                                                 │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + setAuthToken(token): void                                                     │
│ + get(url): Promise<Response>                                                   │
│ + post(url, data): Promise<Response>                                            │
│ + put(url, data): Promise<Response>                                             │
│ + delete(url): Promise<Response>                                                │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `setAuthToken(token)`: กำหนด JWT token สำหรับการยืนยันตัวตน
- `get(url)`: สร้างคำขอ HTTP GET
- `post(url, data)`: สร้างคำขอ HTTP POST
- `put(url, data)`: สร้างคำขอ HTTP PUT
- `delete(url)`: สร้างคำขอ HTTP DELETE

### 12. AuthAPI (API การยืนยันตัวตน)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                AuthAPI                                         │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + login(credentials): Promise<AuthResponse>                                     │
│ + getCurrentUser(): Promise<User>                                               │
│ + changePassword(current, new): Promise<void>                                   │
│ + resetPassword(user, new): Promise<void>                                       │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `login(credentials)`: ยืนยันตัวตนผู้ใช้และส่งคืน JWT token
- `getCurrentUser()`: ดึงข้อมูลผู้ใช้ปัจจุบัน
- `changePassword(current, new)`: เปลี่ยนรหัสผ่านผู้ใช้
- `resetPassword(user, new)`: รีเซ็ตรหัสผ่านโดยใช้รหัสนักศึกษา

### 13. UserAPI (API การจัดการผู้ใช้)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                UserAPI                                         │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + getUsers(): Promise<User[]>                                                   │
│ + getUser(id): Promise<User>                                                    │
│ + updateUser(id, data): Promise<User>                                           │
│ + deleteUser(id): Promise<void>                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `getUsers()`: ดึงข้อมูลผู้ใช้ทั้งหมด
- `getUser(id)`: ดึงข้อมูลผู้ใช้ตาม ID
- `updateUser(id, data)`: อัปเดตข้อมูลผู้ใช้
- `deleteUser(id)`: ลบผู้ใช้ตาม ID

### 14. ProjectAPI (API การจัดการโปรเจค)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                              ProjectAPI                                        │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + getProjects(): Promise<Project[]>                                             │
│ + getProject(id): Promise<Project>                                              │
│ + createProject(data): Promise<Project>                                         │
│ + updateProject(id, data): Promise<Project>                                     │
│ + deleteProject(id): Promise<void>                                              │
│ + addStudent(projectId, studentId): Promise<void>                               │
│ + removeStudent(projectId, studentId): Promise<void>                            │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `getProjects()`: ดึงข้อมูลโปรเจคของผู้ใช้
- `getProject(id)`: ดึงข้อมูลโปรเจคตาม ID
- `createProject(data)`: สร้างโปรเจคใหม่
- `updateProject(id, data)`: อัปเดตข้อมูลโปรเจค
- `deleteProject(id)`: ลบโปรเจคตาม ID
- `addStudent(projectId, studentId)`: เพิ่มนักศึกษาในโปรเจค
- `removeStudent(projectId, studentId)`: ลบนักศึกษาออกจากโปรเจค

### 15. AppointmentAPI (API การจัดการการนัดหมาย)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                            AppointmentAPI                                      │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + getAppointments(): Promise<Appointment[]>                                     │
│ + getAppointment(id): Promise<Appointment>                                      │
│ + createAppointment(data): Promise<Appointment>                                 │
│ + updateAppointment(id, data): Promise<Appointment>                             │
│ + updateAppointmentStatus(id, status): Promise<void>                            │
│ + deleteAppointment(id): Promise<void>                                          │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `getAppointments()`: ดึงข้อมูลการนัดหมายของผู้ใช้
- `getAppointment(id)`: ดึงข้อมูลการนัดหมายตาม ID
- `createAppointment(data)`: สร้างการนัดหมายใหม่
- `updateAppointment(id, data)`: อัปเดตข้อมูลการนัดหมาย
- `updateAppointmentStatus(id, status)`: อัปเดตสถานะการนัดหมาย
- `deleteAppointment(id)`: ลบการนัดหมายตาม ID

## 📊 โมเดลข้อมูล (Data Models)

### 16. User (ผู้ใช้)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                  User                                          │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + id: number                                                                    │
│ + studentId: string                                                             │
│ + firstName: string                                                             │
│ + lastName: string                                                              │
│ + phone: string                                                                 │
│ + email: string                                                                 │
│ + office: string                                                                │
│ + role: string                                                                  │
│ + major: string                                                                 │
│ + passwordHash: string                                                          │
│ + createdAt: Date                                                               │
│ + updatedAt: Date                                                               │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายฟิลด์:**
- `id`: ตัวระบุเฉพาะสำหรับผู้ใช้
- `studentId`: รหัสนักศึกษา/อาจารย์สำหรับเข้าสู่ระบบ
- `firstName`: ชื่อจริงของผู้ใช้
- `lastName`: นามสกุลของผู้ใช้
- `phone`: หมายเลขโทรศัพท์ติดต่อ
- `email`: ที่อยู่อีเมลติดต่อ
- `office`: ตำแหน่งสำนักงาน (สำหรับอาจารย์)
- `role`: บทบาทผู้ใช้ (student/advisor)
- `major`: สาขาวิชา (cs/it)
- `passwordHash`: รหัสผ่านที่เข้ารหัสแล้ว
- `createdAt`: เวลาที่สร้างบัญชี
- `updatedAt`: เวลาที่อัปเดตล่าสุด

### 17. Project (โปรเจค)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                Project                                         │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + id: number                                                                    │
│ + name: string                                                                  │
│ + description: string                                                           │
│ + advisorId: number                                                             │
│ + advisor: User                                                                 │
│ + students: User[]                                                              │
│ + createdAt: Date                                                               │
│ + updatedAt: Date                                                               │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายฟิลด์:**
- `id`: ตัวระบุเฉพาะสำหรับโปรเจค
- `name`: ชื่อโปรเจค
- `description`: คำอธิบายโปรเจค
- `advisorId`: ID ของอาจารย์ที่ปรึกษาโปรเจค
- `advisor`: วัตถุผู้ใช้อาจารย์ที่ปรึกษา
- `students`: อาร์เรย์ของวัตถุผู้ใช้นักศึกษา
- `createdAt`: เวลาที่สร้างโปรเจค
- `updatedAt`: เวลาที่อัปเดตล่าสุด

### 18. Appointment (การนัดหมาย)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                              Appointment                                       │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + id: number                                                                    │
│ + date: Date                                                                    │
│ + time: string                                                                  │
│ + location: string                                                              │
│ + notes: string                                                                 │
│ + status: string                                                                │
│ + studentId: number                                                             │
│ + advisorId: number                                                             │
│ + projectId: number                                                             │
│ + student: User                                                                 │
│ + advisor: User                                                                 │
│ + project: Project                                                              │
│ + comments: Comment[]                                                           │
│ + createdAt: Date                                                               │
│ + updatedAt: Date                                                               │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายฟิลด์:**
- `id`: ตัวระบุเฉพาะสำหรับการนัดหมาย
- `date`: วันที่นัดหมาย
- `time`: เวลานัดหมาย
- `location`: สถานที่นัดพบ
- `notes`: โน๊ตการนัดหมาย
- `status`: สถานะการนัดหมาย (pending/confirmed/rejected/completed)
- `studentId`: ID ของนักศึกษา
- `advisorId`: ID ของอาจารย์
- `projectId`: ID ของโปรเจคที่เกี่ยวข้อง
- `student`: วัตถุผู้ใช้นักศึกษา
- `advisor`: วัตถุผู้ใช้อาจารย์
- `project`: วัตถุโปรเจค
- `comments`: อาร์เรย์ของความคิดเห็น
- `createdAt`: เวลาที่สร้างการนัดหมาย
- `updatedAt`: เวลาที่อัปเดตล่าสุด

## ⚙️ ส่วนประกอบหลังบ้าน (Backend Components)

### 19. Server (เซิร์ฟเวอร์)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                                Server                                          │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + app: Express                                                                  │
│ + database: Pool                                                                │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + start(): void                                                                 │
│ + setupMiddleware(): void                                                       │
│ + setupRoutes(): void                                                           │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `start()`: เริ่มต้นเซิร์ฟเวอร์ Express
- `setupMiddleware()`: กำหนดค่า middleware (CORS, auth, etc.)
- `setupRoutes()`: กำหนดค่าเส้นทาง API ทั้งหมด

### 20. AuthController (ตัวควบคุมการยืนยันตัวตน)
┌─────────────────────────────────────────────────────────────────────────────────┐
│                            AuthController                                      │
├─────────────────────────────────────────────────────────────────────────────────┤
│ + login(req, res): void                                                        │
│ + getCurrentUser(req, res): void                                               │
│ + changePassword(req, res): void                                               │
│ + resetPassword(req, res): void                                                │
└─────────────────────────────────────────────────────────────────────────────────┘

**คำอธิบายเมธอด:**
- `login(req, res)`: จัดการการยืนยันตัวตนผู้ใช้
- `getCurrentUser(req, res)`: ส่งคืนข้อมูลผู้ใช้ปัจจุบัน
- `changePassword(req, res)`: จัดการการเปลี่ยนรหัสผ่าน
- `resetPassword(req, res)`: จัดการการรีเซ็ตรหัสผ่าน

## 🔄 ความสัมพันธ์ (Relationships)

### 📋 ความสัมพันธ์หลัก
```
┌─────────────────────────────────────────────────────────────────────────────────┐
│                              ความสัมพันธ์                                      │
├─────────────────────────────────────────────────────────────────────────────────┤
│                                                                                 │
│  User ──1:N──> Project (อาจารย์ที่ปรึกษา)                                      │
│  User ──N:M──> Project (นักศึกษา)                                              │
│  User ──1:N──> Appointment (นักศึกษา)                                          │
│  User ──1:N──> Appointment (อาจารย์)                                           │
│  User ──1:N──> Notification                                                    │
│                                                                                 │
│  Project ──1:N──> Appointment                                                  │
│  Project ──N:M──> User (นักศึกษา)                                              │
│                                                                                 │
│  Appointment ──1:N──> Comment                                                  │
│  Appointment ──1:N──> Notification                                             │
│                                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘
```

## 🎨 รูปแบบการออกแบบ (Design Patterns)

### 🏗️ รูปแบบที่ใช้
```
┌─────────────────────────────────────────────────────────────────────────────────┐
│                            รูปแบบการออกแบบ                                     │
├─────────────────────────────────────────────────────────────────────────────────┤
│                                                                                 │
│  ┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐             │
│  │   Context       │    │   Repository    │    │      MVC        │             │
│  │   Pattern       │    │   Pattern       │    │    Pattern      │             │
│  ├─────────────────┤    ├─────────────────┤    ├─────────────────┤             │
│  │ • AuthContext   │    │ • API Services  │    │ • Controllers   │             │
│  │ • การจัดการ     │    │ • การเข้าถึง    │    │ • Models        │             │
│  │   สถานะทั่วโลก  │    │   ข้อมูล        │    │ • Views (React) │             │
│  └─────────────────┘    └─────────────────┘    └─────────────────┘             │
│                                                                                 │
│  ┌─────────────────┐    ┌─────────────────┐                                    │
│  │   Middleware    │    │   Service       │                                    │
│  │   Pattern       │    │   Layer         │                                    │
│  ├─────────────────┤    ├─────────────────┤                                    │
│  │ • AuthMiddleware│    │ • ตรรกะธุรกิจ   │                                    │
│  │ • CORS          │    │ • ชั้น API      │                                    │
│  │ • การจัดการ     │    │ • การตรวจสอบ    │                                    │
│  │   ข้อผิดพลาด    │    │   ความถูกต้อง   │                                    │
│  └─────────────────┘    └─────────────────┘                                    │
└─────────────────────────────────────────────────────────────────────────────────┘
```

## 📋 สรุป

### 🎯 ภาพรวมระบบ
```
┌─────────────────────────────────────────────────────────────────────────────────┐
│                              สรุประบบ                                          │
├─────────────────────────────────────────────────────────────────────────────────┤
│                                                                                 │
│  🎯 วัตถุประสงค์: ระบบจัดการการนัดหมายทางวิชาการ                                │
│                                                                                 │
│  👥 ผู้ใช้: นักศึกษาและอาจารย์ที่ปรึกษา                                          │
│                                                                                 │
│  🏗️ สถาปัตยกรรม: 3 ชั้น (หน้าบ้าน, หลังบ้าน, ฐานข้อมูล)                        │
│                                                                                 │
│  🔐 ความปลอดภัย: การยืนยันตัวตนด้วย JWT และการควบคุมการเข้าถึงตามบทบาท         │
│                                                                                 │
│  📱 ส่วนติดต่อ: เว็บแอปพลิเคชันที่ตอบสนองได้ทันสมัยพร้อมการสนับสนุนภาษาไทย      │
│                                                                                 │
│  📊 ฟีเจอร์: วงจรชีวิตการนัดหมายที่สมบูรณ์พร้อมการแจ้งเตือน                    │
│                                                                                 │
└─────────────────────────────────────────────────────────────────────────────────┘
```

---

**📝 หมายเหตุ: แผนภาพคลาสนี้แสดงส่วนประกอบทั้งหมดพร้อมคำอธิบายเมธอดที่ครอบคลุมสำหรับระบบจัดการการนัดหมาย**

