📊 แผนภาพ Class Diagram ระบบนัดหมาย - ภาษาไทย
===============================================

🏗️ โครงสร้างคลาสหลัก (Main Entity Classes)
==========================================

┌─────────────────────────────────────────────────────────────────┐
│                        👤 User (ผู้ใช้)                        │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 คุณสมบัติ (Attributes):                                     │
│   • id: string                    // รหัสผู้ใช้                │
│   • studentId?: string            // รหัสนักศึกษา/อาจารย์       │
│   • firstName: string             // ชื่อ                      │
│   • lastName: string              // นามสกุล                   │
│   • phone: string                 // เบอร์โทรศัพท์             │
│   • email?: string                // อีเมล (สำหรับอาจารย์)      │
│   • office?: string               // สำนักงาน (สำหรับอาจารย์)   │
│   • major?: string                // สาขาวิชา                  │
│   • role: 'student' | 'advisor'   // บทบาท                    │
│   • createdAt: Date               // วันที่สร้าง                │
│   • updatedAt: Date               // วันที่อัปเดต               │
└─────────────────────────────────────────────────────────────────┘
                                    │
                                    │ 1..*
                                    ▼
┌─────────────────────────────────────────────────────────────────┐
│                      📁 Project (โครงงาน)                      │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 คุณสมบัติ (Attributes):                                     │
│   • id: string                    // รหัสโครงงาน               │
│   • name: string                  // ชื่อโครงงาน               │
│   • advisorId: string             // รหัสอาจารย์ที่ปรึกษา       │
│   • advisor: User                 // ข้อมูลอาจารย์ที่ปรึกษา     │
│   • students: User[]              // รายชื่อนักศึกษา            │
│   • createdAt: Date               // วันที่สร้าง                │
│   • updatedAt: Date               // วันที่อัปเดต               │
└─────────────────────────────────────────────────────────────────┘
                                    │
                                    │ 1..*
                                    ▼
┌─────────────────────────────────────────────────────────────────┐
│                    📅 Appointment (การนัดหมาย)                  │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 คุณสมบัติ (Attributes):                                     │
│   • id: string                    // รหัสการนัดหมาย             │
│   • date: Date                    // วันที่นัดหมาย              │
│   • time: string                  // เวลานัดหมาย                │
│   • location: string              // สถานที่นัดหมาย             │
│   • notes?: string                // หมายเหตุ                   │
│   • status: 'pending' | 'confirmed' | 'rejected' | 'cancelled' │
│           | 'completed' | 'failed' // สถานะการนัดหมาย           │
│   • studentId: string             // รหัสนักศึกษา               │
│   • advisorId: string             // รหัสอาจารย์                │
│   • projectId?: string            // รหัสโครงงาน                │
│   • student: User                 // ข้อมูลนักศึกษา             │
│   • advisor: User                 // ข้อมูลอาจารย์              │
│   • project?: Project             // ข้อมูลโครงงาน              │
│   • comments: Comment[]           // รายการความคิดเห็น          │
│   • createdAt: Date               // วันที่สร้าง                │
│   • updatedAt: Date               // วันที่อัปเดต               │
└─────────────────────────────────────────────────────────────────┘
                                    │
                                    │ 1..*
                                    ▼
┌─────────────────────────────────────────────────────────────────┐
│                      💬 Comment (ความคิดเห็น)                   │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 คุณสมบัติ (Attributes):                                     │
│   • id: string                    // รหัสความคิดเห็น            │
│   • content: string               // เนื้อหาความคิดเห็น         │
│   • appointmentId: string         // รหัสการนัดหมาย             │
│   • userId: string                // รหัสผู้ใช้                 │
│   • user: User                    // ข้อมูลผู้ใช้               │
│   • createdAt: Date               // วันที่สร้าง                │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│                    🔔 Notification (การแจ้งเตือน)               │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 คุณสมบัติ (Attributes):                                     │
│   • id: string                    // รหัสการแจ้งเตือน          │
│   • userId: string                // รหัสผู้ใช้                 │
│   • type: 'appointment_reminder' | 'appointment_request' |      │
│           'appointment_confirmed' | 'appointment_rejected'      │
│                                  // ประเภทการแจ้งเตือน          │
│   • title: string                 // หัวข้อการแจ้งเตือน         │
│   • message: string               // ข้อความการแจ้งเตือน        │
│   • isRead: boolean               // สถานะการอ่าน               │
│   • appointmentId?: string        // รหัสการนัดหมาย             │
│   • createdAt: Date               // วันที่สร้าง                │
└─────────────────────────────────────────────────────────────────┘

🔧 คลาสอินเทอร์เฟซ (Interface Classes)
======================================

┌─────────────────────────────────────────────────────────────────┐
│                   🔐 LoginCredentials (ข้อมูลเข้าสู่ระบบ)        │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 คุณสมบัติ (Attributes):                                     │
│   • user: string                  // รหัสนักศึกษา/อาจารย์       │
│   • password: string              // รหัสผ่าน                   │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│                   🎫 AuthResponse (การตอบสนองการเข้าสู่ระบบ)     │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 คุณสมบัติ (Attributes):                                     │
│   • user: User                    // ข้อมูลผู้ใช้               │
│   • token: string                 // โทเค็นการเข้าสู่ระบบ       │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│                    📡 ApiResponse<T> (การตอบสนอง API)           │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 คุณสมบัติ (Attributes):                                     │
│   • success: boolean              // สถานะความสำเร็จ            │
│   • data?: T                      // ข้อมูลที่ส่งกลับ            │
│   • message?: string              // ข้อความ                    │
│   • error?: string                // ข้อผิดพลาด                 │
└─────────────────────────────────────────────────────────────────┘

🏛️ คลาส Context (Context Classes)
==================================

┌─────────────────────────────────────────────────────────────────┐
│                    🔐 AuthContext (บริบทการเข้าสู่ระบบ)          │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 คุณสมบัติ (Attributes):                                     │
│   • user: User | null             // ข้อมูลผู้ใช้ปัจจุบัน        │
│   • loading: boolean              // สถานะการโหลด               │
│                                                                 │
│ 🔹 เมธอด (Methods):                                             │
│   • login(credentials: LoginCredentials): Promise<void>         │
│     // เข้าสู่ระบบด้วยข้อมูลที่ให้มา                            │
│   • logout(): void                                               │
│     // ออกจากระบบ                                               │
│   • updateUser(userData: Partial<User>): void                   │
│     // อัปเดตข้อมูลผู้ใช้                                        │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│                🔔 NotificationContext (บริบทการแจ้งเตือน)       │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 คุณสมบัติ (Attributes):                                     │
│   • notifications: Notification[] // รายการการแจ้งเตือน         │
│   • unreadCount: number           // จำนวนการแจ้งเตือนที่ยังไม่อ่าน │
│                                                                 │
│ 🔹 เมธอด (Methods):                                             │
│   • markAsRead(notificationId: string): Promise<void>           │
│     // ทำเครื่องหมายว่าอ่านแล้ว                                  │
│   • markAllAsRead(): Promise<void>                              │
│     // ทำเครื่องหมายว่าอ่านทั้งหมดแล้ว                           │
│   • refreshNotifications(): Promise<void>                       │
│     // รีเฟรชการแจ้งเตือน                                       │
└─────────────────────────────────────────────────────────────────┘

🌐 คลาส API Services (API Service Classes)
==========================================

┌─────────────────────────────────────────────────────────────────┐
│                      🔐 AuthAPI (API การเข้าสู่ระบบ)            │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 เมธอด (Methods):                                             │
│   • login(credentials: LoginCredentials): Promise<AuthResponse> │
│     // เข้าสู่ระบบ                                               │
│   • getCurrentUser(): Promise<User>                             │
│     // ดึงข้อมูลผู้ใช้ปัจจุบัน                                    │
│   • changePassword(currentPassword: string, newPassword: string): │
│     Promise<void>                                               │
│     // เปลี่ยนรหัสผ่าน                                           │
│   • resetPassword(user: string, newPassword: string): Promise<void> │
│     // รีเซ็ตรหัสผ่าน                                            │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│                      👥 UserAPI (API ผู้ใช้)                    │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 เมธอด (Methods):                                             │
│   • updateProfile(userId: string, data: Partial<User>):         │
│     Promise<User>                                                │
│     // อัปเดตโปรไฟล์ผู้ใช้                                       │
│   • getUsers(): Promise<User[]>                                 │
│     // ดึงรายการผู้ใช้ทั้งหมด                                     │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│                      📁 ProjectAPI (API โครงงาน)                │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 เมธอด (Methods):                                             │
│   • createProject(data: { name: string }): Promise<Project>     │
│     // สร้างโครงงานใหม่                                          │
│   • getProjects(): Promise<Project[]>                           │
│     // ดึงรายการโครงงานทั้งหมด                                   │
│   • getProject(projectId: string): Promise<Project>             │
│     // ดึงข้อมูลโครงงานตาม ID                                    │
│   • updateProject(projectId: string, data: Partial<Project>):   │
│     Promise<Project>                                             │
│     // อัปเดตข้อมูลโครงงาน                                       │
│   • deleteProject(projectId: string): Promise<void>             │
│     // ลบโครงงาน                                                 │
│   • inviteStudent(projectId: string, studentId: string):        │
│     Promise<Project>                                             │
│     // เชิญนักศึกษาเข้าร่วมโครงงาน                               │
│   • removeStudent(projectId: string, studentId: string):        │
│     Promise<Project>                                             │
│     // ลบนักศึกษาออกจากโครงงาน                                  │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│                    📅 AppointmentAPI (API การนัดหมาย)           │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 เมธอด (Methods):                                             │
│   • createAppointment(data: { date: string, time: string,       │
│     location: string, notes?: string, advisorId: string,        │
│     projectId?: string }): Promise<Appointment>                 │
│     // สร้างการนัดหมายใหม่                                       │
│   • getAppointments(): Promise<Appointment[]>                   │
│     // ดึงรายการการนัดหมายทั้งหมด                                │
│   • getAppointment(appointmentId: string): Promise<Appointment> │
│     // ดึงข้อมูลการนัดหมายตาม ID                                 │
│   • updateAppointment(appointmentId: string, data: Partial<Appointment>): │
│     Promise<Appointment>                                         │
│     // อัปเดตข้อมูลการนัดหมาย                                    │
│   • deleteAppointment(appointmentId: string): Promise<void>     │
│     // ลบการนัดหมาย                                              │
│   • confirmAppointment(appointmentId: string): Promise<Appointment> │
│     // ยืนยันการนัดหมาย                                          │
│   • rejectAppointment(appointmentId: string): Promise<Appointment> │
│     // ปฏิเสธการนัดหมาย                                          │
│   • completeAppointment(appointmentId: string): Promise<Appointment> │
│     // ทำเครื่องหมายว่าการนัดหมายเสร็จสิ้น                        │
│   • getProjectAppointments(projectId: string): Promise<Appointment[]> │
│     // ดึงการนัดหมายของโครงงาน                                   │
│   • studentAcceptAppointment(appointmentId: string): Promise<Appointment> │
│     // นักศึกษายอมรับการนัดหมาย                                  │
│   • studentRejectAppointment(appointmentId: string, reason?: string): │
│     Promise<Appointment>                                         │
│     // นักศึกษาปฏิเสธการนัดหมาย                                  │
│   • updateAppointmentStatus(appointmentId: string, status: string): │
│     Promise<Appointment>                                         │
│     // อัปเดตสถานะการนัดหมาย                                     │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│                      💬 CommentAPI (API ความคิดเห็น)            │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 เมธอด (Methods):                                             │
│   • addComment(appointmentId: string, content: string):         │
│     Promise<Comment>                                             │
│     // เพิ่มความคิดเห็น                                          │
│   • getComments(appointmentId: string): Promise<Comment[]>      │
│     // ดึงรายการความคิดเห็น                                       │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│                    🔔 NotificationAPI (API การแจ้งเตือน)        │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 เมธอด (Methods):                                             │
│   • getNotifications(): Promise<Notification[]>                 │
│     // ดึงรายการการแจ้งเตือน                                     │
│   • markAsRead(notificationId: string): Promise<Notification>   │
│     // ทำเครื่องหมายว่าอ่านแล้ว                                  │
│   • markAllAsRead(): Promise<void>                              │
│     // ทำเครื่องหมายว่าอ่านทั้งหมดแล้ว                           │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│                      📥 ImportAPI (API การนำเข้าข้อมูล)         │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 เมธอด (Methods):                                             │
│   • importUsers(file: File): Promise<{ success: boolean;        │
│     message: string }>                                           │
│     // นำเข้าข้อมูลผู้ใช้จากไฟล์ CSV                             │
└─────────────────────────────────────────────────────────────────┘

🛠️ คลาส Utility (Utility Classes)
==================================

┌─────────────────────────────────────────────────────────────────┐
│                    🎓 MajorUtils (เครื่องมือสาขาวิชา)           │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 เมธอด (Methods):                                             │
│   • getMajorName(majorCode?: string): string                    │
│     // แปลงรหัสสาขาวิชาเป็นชื่อภาษาไทย                          │
│   • getMajorCode(majorName: string): string                     │
│     // แปลงชื่อภาษาไทยเป็นรหัสสาขาวิชา                          │
└─────────────────────────────────────────────────────────────────┘

🏗️ คลาส Component (Component Classes)
=====================================

┌─────────────────────────────────────────────────────────────────┐
│                      🎨 App (แอปพลิเคชันหลัก)                   │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 คุณสมบัติ (Attributes):                                     │
│   • children: React.ReactNode     // เนื้อหาที่แสดง             │
│                                                                 │
│ 🔹 เมธอด (Methods):                                             │
│   • render(): JSX.Element                                       │
│     // แสดงผลแอปพลิเคชันหลัก                                    │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│                      🛡️ ProtectedRoute (เส้นทางป้องกัน)         │
├─────────────────────────────────────────────────────────────────┤
│ 🔹 คุณสมบัติ (Attributes):                                     │
│   • children: React.ReactNode     // เนื้อหาที่แสดง             │
│                                                                 │
│ 🔹 เมธอด (Methods):                                             │
│   • render(): JSX.Element                                       │
│     // ตรวจสอบการเข้าสู่ระบบก่อนแสดงเนื้อหา                     │
└─────────────────────────────────────────────────────────────────┘

📊 ความสัมพันธ์ระหว่างคลาส (Class Relationships)
================================================

🔗 ความสัมพันธ์หลัก (Main Relationships):
├── User (1) ──────── (0..*) Project
│   ├── เป็น advisor ของโครงงาน
│   └── เป็น student ในโครงงาน
│
├── Project (1) ────── (0..*) Appointment
│   └── การนัดหมายที่เกี่ยวข้องกับโครงงาน
│
├── User (1) ──────── (0..*) Appointment
│   ├── เป็น student ที่นัดหมาย
│   └── เป็น advisor ที่นัดหมาย
│
├── Appointment (1) ── (0..*) Comment
│   └── ความคิดเห็นในการนัดหมาย
│
├── User (1) ──────── (0..*) Comment
│   └── ผู้เขียนความคิดเห็น
│
├── User (1) ──────── (0..*) Notification
│   └── การแจ้งเตือนของผู้ใช้
│
└── Appointment (1) ── (0..1) Notification
    └── การแจ้งเตือนที่เกี่ยวข้องกับการนัดหมาย

🔧 ความสัมพันธ์การใช้งาน (Usage Relationships):
├── AuthContext ──────► AuthAPI
│   └── ใช้สำหรับการจัดการการเข้าสู่ระบบ
│
├── NotificationContext ──► NotificationAPI
│   └── ใช้สำหรับการจัดการการแจ้งเตือน
│
├── App ──────────────► AuthProvider
│   └── ใช้สำหรับการจัดการสถานะการเข้าสู่ระบบ
│
├── App ──────────────► NotificationProvider
│   └── ใช้สำหรับการจัดการสถานะการแจ้งเตือน
│
├── ProtectedRoute ────► AuthContext
│   └── ใช้สำหรับตรวจสอบการเข้าสู่ระบบ
│
└── MajorUtils ────────► User
    └── ใช้สำหรับแปลงรหัสสาขาวิชา

📈 สรุปสถิติคลาส
================

📊 จำนวนคลาสทั้งหมด: 18 คลาส
├── 🏗️ คลาสหลัก (Main Entity Classes): 5 คลาส
├── 🔧 คลาสอินเทอร์เฟซ (Interface Classes): 3 คลาส
├── 🏛️ คลาส Context (Context Classes): 2 คลาส
├── 🌐 คลาส API Services (API Service Classes): 7 คลาส
├── 🛠️ คลาส Utility (Utility Classes): 1 คลาส
└── 🏗️ คลาส Component (Component Classes): 2 คลาส

📊 จำนวนเมธอดทั้งหมด: 40+ เมธอด
├── 🔐 AuthAPI: 4 เมธอด
├── 👥 UserAPI: 2 เมธอด
├── 📁 ProjectAPI: 7 เมธอด
├── 📅 AppointmentAPI: 12 เมธอด
├── 💬 CommentAPI: 2 เมธอด
├── 🔔 NotificationAPI: 3 เมธอด
├── 📥 ImportAPI: 1 เมธอด
├── 🎓 MajorUtils: 2 เมธอด
├── 🔐 AuthContext: 3 เมธอด
└── 🔔 NotificationContext: 3 เมธอด

🎯 จุดเด่นของระบบ
================

✅ **การจัดการสถานะ (State Management)**
- ใช้ React Context สำหรับการจัดการสถานะการเข้าสู่ระบบ
- ใช้ React Context สำหรับการจัดการการแจ้งเตือน
- การอัปเดตสถานะแบบ Real-time

✅ **การจัดการ API (API Management)**
- แยก API Services ตามหน้าที่การทำงาน
- ใช้ TypeScript สำหรับ Type Safety
- การจัดการ Error Handling ที่ดี

✅ **การจัดการข้อมูล (Data Management)**
- ความสัมพันธ์ระหว่าง Entity ที่ชัดเจน
- การใช้ Foreign Key สำหรับการเชื่อมโยงข้อมูล
- การจัดการสถานะการนัดหมายที่ครบถ้วน

✅ **การจัดการผู้ใช้ (User Management)**
- รองรับทั้งนักศึกษาและอาจารย์
- ระบบการเปลี่ยนรหัสผ่าน
- ระบบการรีเซ็ตรหัสผ่าน

✅ **การจัดการการนัดหมาย (Appointment Management)**
- สถานะการนัดหมายที่หลากหลาย
- ระบบความคิดเห็น
- ระบบการแจ้งเตือน

✅ **การจัดการโครงงาน (Project Management)**
- การเชิญนักศึกษาเข้าร่วมโครงงาน
- การลบนักศึกษาออกจากโครงงาน
- การจัดการโครงงานแบบครบวงจร

🎉 **สรุป**
============

แผนภาพ Class Diagram นี้แสดงให้เห็นถึงโครงสร้างของระบบนัดหมายที่ครบถ้วนและมีประสิทธิภาพ โดยมีการแบ่งหน้าที่การทำงานที่ชัดเจน การจัดการข้อมูลที่ดี และการรองรับการใช้งานที่หลากหลาย ทั้งสำหรับนักศึกษาและอาจารย์ที่ปรึกษา

ระบบนี้ใช้เทคโนโลยีที่ทันสมัย เช่น React, TypeScript, และ Node.js พร้อมกับการจัดการฐานข้อมูล PostgreSQL ที่มีประสิทธิภาพสูง

🔍 **การใช้งาน**
===============

แผนภาพนี้สามารถใช้สำหรับ:
- การทำความเข้าใจโครงสร้างระบบ
- การพัฒนาต่อในอนาคต
- การเขียนเอกสารระบบ
- การนำเสนอต่อผู้เกี่ยวข้อง
- การวางแผนการพัฒนาระบบ
