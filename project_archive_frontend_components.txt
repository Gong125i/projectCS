# üé® Frontend Components - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß

## üìã ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° Frontend Components
React Components ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÅ‡∏•‡∏∞‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤

---

## üèóÔ∏è Component Structure

### **1. ProjectArchivePage (‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å)**
```typescript
// components/ProjectArchivePage.tsx
import React, { useState, useEffect } from 'react';
import { ProjectArchive, SearchFilters, ProjectStats } from '../types';
import { ProjectArchiveService } from '../services';
import ProjectArchiveList from './ProjectArchiveList';
import ProjectSearchForm from './ProjectSearchForm';
import ProjectStatsPanel from './ProjectStatsPanel';
import ExportButtons from './ExportButtons';

interface ProjectArchivePageProps {
  user: User;
}

const ProjectArchivePage: React.FC<ProjectArchivePageProps> = ({ user }) => {
  const [archivedProjects, setArchivedProjects] = useState<ProjectArchive[]>([]);
  const [searchFilters, setSearchFilters] = useState<SearchFilters>({});
  const [stats, setStats] = useState<ProjectStats | null>(null);
  const [loading, setLoading] = useState(false);
  const [pagination, setPagination] = useState({
    currentPage: 1,
    totalPages: 1,
    totalItems: 0,
    itemsPerPage: 10
  });

  // Load archived projects
  const loadArchivedProjects = async (filters: SearchFilters = {}, page: number = 1) => {
    setLoading(true);
    try {
      const response = await ProjectArchiveService.getArchivedProjects(filters, page);
      setArchivedProjects(response.data);
      setPagination(response.pagination);
    } catch (error) {
      console.error('Error loading archived projects:', error);
    } finally {
      setLoading(false);
    }
  };

  // Load statistics
  const loadStats = async () => {
    try {
      const response = await ProjectArchiveService.getStatistics();
      setStats(response);
    } catch (error) {
      console.error('Error loading statistics:', error);
    }
  };

  // Handle search
  const handleSearch = (filters: SearchFilters) => {
    setSearchFilters(filters);
    loadArchivedProjects(filters, 1);
  };

  // Handle page change
  const handlePageChange = (page: number) => {
    loadArchivedProjects(searchFilters, page);
  };

  // Handle export
  const handleExport = async (format: 'csv' | 'pdf' | 'excel') => {
    try {
      await ProjectArchiveService.exportProjects(format, searchFilters);
    } catch (error) {
      console.error('Error exporting projects:', error);
    }
  };

  useEffect(() => {
    loadArchivedProjects();
    loadStats();
  }, []);

  return (
    <div className="project-archive-page">
      <div className="page-header">
        <h1>‡∏Ñ‡∏•‡∏±‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</h1>
        <p>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
      </div>

      <div className="page-content">
        <div className="search-section">
          <ProjectSearchForm onSearch={handleSearch} />
        </div>

        <div className="stats-section">
          <ProjectStatsPanel stats={stats} />
        </div>

        <div className="export-section">
          <ExportButtons onExport={handleExport} />
        </div>

        <div className="projects-section">
          <ProjectArchiveList
            projects={archivedProjects}
            loading={loading}
            pagination={pagination}
            onPageChange={handlePageChange}
          />
        </div>
      </div>
    </div>
  );
};

export default ProjectArchivePage;
```

### **2. ProjectSearchForm (‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)**
```typescript
// components/ProjectSearchForm.tsx
import React, { useState } from 'react';
import { SearchFilters } from '../types';

interface ProjectSearchFormProps {
  onSearch: (filters: SearchFilters) => void;
}

const ProjectSearchForm: React.FC<ProjectSearchFormProps> = ({ onSearch }) => {
  const [filters, setFilters] = useState<SearchFilters>({
    query: '',
    academic_year: '',
    semester: '',
    advisor_name: '',
    technology: [],
    keywords: [],
    grade_range: '',
    project_type: ''
  });

  const [showAdvanced, setShowAdvanced] = useState(false);

  const handleInputChange = (field: keyof SearchFilters, value: any) => {
    setFilters(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSearch(filters);
  };

  const handleReset = () => {
    setFilters({
      query: '',
      academic_year: '',
      semester: '',
      advisor_name: '',
      technology: [],
      keywords: [],
      grade_range: '',
      project_type: ''
    });
    onSearch({});
  };

  return (
    <div className="search-form">
      <form onSubmit={handleSubmit}>
        <div className="basic-search">
          <div className="search-input">
            <input
              type="text"
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ..."
              value={filters.query}
              onChange={(e) => handleInputChange('query', e.target.value)}
            />
            <button type="submit" className="search-btn">
              üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            </button>
          </div>
        </div>

        <div className="quick-filters">
          <select
            value={filters.academic_year}
            onChange={(e) => handleInputChange('academic_year', e.target.value)}
          >
            <option value="">‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</option>
            <option value="2567">2567</option>
            <option value="2566">2566</option>
            <option value="2565">2565</option>
          </select>

          <select
            value={filters.semester}
            onChange={(e) => handleInputChange('semester', e.target.value)}
          >
            <option value="">‡∏†‡∏≤‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</option>
            <option value="1">1</option>
            <option value="2">2</option>
          </select>

          <button
            type="button"
            onClick={() => setShowAdvanced(!showAdvanced)}
            className="advanced-btn"
          >
            {showAdvanced ? '‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á' : '‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á'}
          </button>
        </div>

        {showAdvanced && (
          <div className="advanced-filters">
            <div className="filter-row">
              <input
                type="text"
                placeholder="‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤"
                value={filters.advisor_name}
                onChange={(e) => handleInputChange('advisor_name', e.target.value)}
              />
            </div>

            <div className="filter-row">
              <input
                type="text"
                placeholder="‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)"
                value={filters.technology.join(', ')}
                onChange={(e) => handleInputChange('technology', e.target.value.split(', '))}
              />
            </div>

            <div className="filter-row">
              <input
                type="text"
                placeholder="‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)"
                value={filters.keywords.join(', ')}
                onChange={(e) => handleInputChange('keywords', e.target.value.split(', '))}
              />
            </div>

            <div className="filter-row">
              <select
                value={filters.grade_range}
                onChange={(e) => handleInputChange('grade_range', e.target.value)}
              >
                <option value="">‡πÄ‡∏Å‡∏£‡∏î</option>
                <option value="A">A</option>
                <option value="B+">B+</option>
                <option value="B">B</option>
                <option value="C+">C+</option>
                <option value="C">C</option>
              </select>

              <select
                value={filters.project_type}
                onChange={(e) => handleInputChange('project_type', e.target.value)}
              >
                <option value="">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ</option>
                <option value="Web Application">Web Application</option>
                <option value="Mobile Application">Mobile Application</option>
                <option value="Desktop Application">Desktop Application</option>
                <option value="Research Project">Research Project</option>
              </select>
            </div>
          </div>
        )}

        <div className="form-actions">
          <button type="submit" className="btn-primary">
            ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
          </button>
          <button type="button" onClick={handleReset} className="btn-secondary">
            ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
          </button>
        </div>
      </form>
    </div>
  );
};

export default ProjectSearchForm;
```

### **3. ProjectArchiveList (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ)**
```typescript
// components/ProjectArchiveList.tsx
import React from 'react';
import { ProjectArchive } from '../types';
import ProjectArchiveCard from './ProjectArchiveCard';
import Pagination from './Pagination';

interface ProjectArchiveListProps {
  projects: ProjectArchive[];
  loading: boolean;
  pagination: {
    currentPage: number;
    totalPages: number;
    totalItems: number;
    itemsPerPage: number;
  };
  onPageChange: (page: number) => void;
}

const ProjectArchiveList: React.FC<ProjectArchiveListProps> = ({
  projects,
  loading,
  pagination,
  onPageChange
}) => {
  if (loading) {
    return (
      <div className="loading">
        <div className="spinner"></div>
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
      </div>
    );
  }

  if (projects.length === 0) {
    return (
      <div className="no-results">
        <div className="no-results-icon">üìÅ</div>
        <h3>‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</h3>
        <p>‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö</p>
      </div>
    );
  }

  return (
    <div className="project-archive-list">
      <div className="results-header">
        <h3>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</h3>
        <p>‡∏û‡∏ö {pagination.totalItems} ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ</p>
      </div>

      <div className="projects-grid">
        {projects.map((project) => (
          <ProjectArchiveCard key={project.id} project={project} />
        ))}
      </div>

      <Pagination
        currentPage={pagination.currentPage}
        totalPages={pagination.totalPages}
        onPageChange={onPageChange}
      />
    </div>
  );
};

export default ProjectArchiveList;
```

### **4. ProjectArchiveCard (‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ)**
```typescript
// components/ProjectArchiveCard.tsx
import React, { useState } from 'react';
import { ProjectArchive } from '../types';

interface ProjectArchiveCardProps {
  project: ProjectArchive;
}

const ProjectArchiveCard: React.FC<ProjectArchiveCardProps> = ({ project }) => {
  const [showDetails, setShowDetails] = useState(false);

  const getGradeColor = (grade: string) => {
    switch (grade) {
      case 'A': return 'grade-a';
      case 'B+': return 'grade-b-plus';
      case 'B': return 'grade-b';
      case 'C+': return 'grade-c-plus';
      case 'C': return 'grade-c';
      default: return 'grade-default';
    }
  };

  return (
    <div className="project-archive-card">
      <div className="card-header">
        <h4 className="project-name">{project.project_name}</h4>
        <div className={`grade-badge ${getGradeColor(project.final_grade)}`}>
          {project.final_grade}
        </div>
      </div>

      <div className="card-content">
        <div className="project-info">
          <div className="info-item">
            <span className="label">‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤:</span>
            <span className="value">{project.advisor_name}</span>
          </div>
          
          <div className="info-item">
            <span className="label">‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤:</span>
            <span className="value">{project.student_names.join(', ')}</span>
          </div>
          
          <div className="info-item">
            <span className="label">‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤:</span>
            <span className="value">{project.academic_year}/{project.semester}</span>
          </div>
          
          <div className="info-item">
            <span className="label">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</span>
            <span className="value">{project.project_type}</span>
          </div>
        </div>

        <div className="technology-tags">
          {project.technology_used.map((tech, index) => (
            <span key={index} className="tech-tag">
              {tech}
            </span>
          ))}
        </div>

        {showDetails && (
          <div className="project-details">
            <div className="description">
              <h5>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</h5>
              <p>{project.description}</p>
            </div>
            
            <div className="keywords">
              <h5>‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:</h5>
              <div className="keyword-tags">
                {project.keywords.map((keyword, index) => (
                  <span key={index} className="keyword-tag">
                    {keyword}
                  </span>
                ))}
              </div>
            </div>
            
            <div className="completion-info">
              <div className="info-item">
                <span className="label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:</span>
                <span className="value">{new Date(project.completion_date).toLocaleDateString('th-TH')}</span>
              </div>
              
              <div className="info-item">
                <span className="label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö:</span>
                <span className="value">{new Date(project.archived_at).toLocaleDateString('th-TH')}</span>
              </div>
            </div>
          </div>
        )}
      </div>

      <div className="card-actions">
        <button
          onClick={() => setShowDetails(!showDetails)}
          className="btn-details"
        >
          {showDetails ? '‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' : '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'}
        </button>
      </div>
    </div>
  );
};

export default ProjectArchiveCard;
```

### **5. ProjectStatsPanel (‡πÅ‡∏ú‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥)**
```typescript
// components/ProjectStatsPanel.tsx
import React from 'react';
import { ProjectStats } from '../types';

interface ProjectStatsPanelProps {
  stats: ProjectStats | null;
}

const ProjectStatsPanel: React.FC<ProjectStatsPanelProps> = ({ stats }) => {
  if (!stats) {
    return (
      <div className="stats-panel loading">
        <div className="spinner"></div>
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥...</p>
      </div>
    );
  }

  return (
    <div className="stats-panel">
      <h3>‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</h3>
      
      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-number">{stats.total_projects}</div>
          <div className="stat-label">‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
        </div>
        
        <div className="stat-card">
          <div className="stat-number">{stats.average_grade}</div>
          <div className="stat-label">‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</div>
        </div>
        
        <div className="stat-card">
          <div className="stat-number">{stats.completion_rate}%</div>
          <div className="stat-label">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</div>
        </div>
      </div>

      <div className="stats-charts">
        <div className="chart-section">
          <h4>‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ï‡∏≤‡∏°‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</h4>
          <div className="chart-bars">
            {Object.entries(stats.projects_by_year).map(([year, count]) => (
              <div key={year} className="chart-bar">
                <div className="bar-label">{year}</div>
                <div className="bar-fill" style={{ width: `${(count / Math.max(...Object.values(stats.projects_by_year))) * 100}%` }}></div>
                <div className="bar-value">{count}</div>
              </div>
            ))}
          </div>
        </div>

        <div className="chart-section">
          <h4>‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ</h4>
          <div className="tech-stats">
            {Object.entries(stats.projects_by_technology).slice(0, 5).map(([tech, count]) => (
              <div key={tech} className="tech-stat">
                <span className="tech-name">{tech}</span>
                <span className="tech-count">{count}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProjectStatsPanel;
```

### **6. ExportButtons (‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å)**
```typescript
// components/ExportButtons.tsx
import React, { useState } from 'react';

interface ExportButtonsProps {
  onExport: (format: 'csv' | 'pdf' | 'excel') => void;
}

const ExportButtons: React.FC<ExportButtonsProps> = ({ onExport }) => {
  const [exporting, setExporting] = useState<string | null>(null);

  const handleExport = async (format: 'csv' | 'pdf' | 'excel') => {
    setExporting(format);
    try {
      await onExport(format);
    } finally {
      setExporting(null);
    }
  };

  return (
    <div className="export-buttons">
      <h4>‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h4>
      <div className="export-options">
        <button
          onClick={() => handleExport('csv')}
          disabled={exporting === 'csv'}
          className="export-btn csv"
        >
          {exporting === 'csv' ? '‚è≥' : 'üìä'} CSV
        </button>
        
        <button
          onClick={() => handleExport('pdf')}
          disabled={exporting === 'pdf'}
          className="export-btn pdf"
        >
          {exporting === 'pdf' ? '‚è≥' : 'üìÑ'} PDF
        </button>
        
        <button
          onClick={() => handleExport('excel')}
          disabled={exporting === 'excel'}
          className="export-btn excel"
        >
          {exporting === 'excel' ? '‚è≥' : 'üìà'} Excel
        </button>
      </div>
    </div>
  );
};

export default ExportButtons;
```

### **7. Pagination (‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤)**
```typescript
// components/Pagination.tsx
import React from 'react';

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
}

const Pagination: React.FC<PaginationProps> = ({
  currentPage,
  totalPages,
  onPageChange
}) => {
  if (totalPages <= 1) return null;

  const getPageNumbers = () => {
    const pages = [];
    const maxVisible = 5;
    const start = Math.max(1, currentPage - Math.floor(maxVisible / 2));
    const end = Math.min(totalPages, start + maxVisible - 1);

    for (let i = start; i <= end; i++) {
      pages.push(i);
    }
    return pages;
  };

  return (
    <div className="pagination">
      <button
        onClick={() => onPageChange(currentPage - 1)}
        disabled={currentPage === 1}
        className="page-btn prev"
      >
        ‚Üê ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      </button>

      {getPageNumbers().map((page) => (
        <button
          key={page}
          onClick={() => onPageChange(page)}
          className={`page-btn ${page === currentPage ? 'active' : ''}`}
        >
          {page}
        </button>
      ))}

      <button
        onClick={() => onPageChange(currentPage + 1)}
        disabled={currentPage === totalPages}
        className="page-btn next"
      >
        ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚Üí
      </button>
    </div>
  );
};

export default Pagination;
```

---

## üé® CSS Styles

### **ProjectArchivePage.css**
```css
.project-archive-page {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.page-header {
  text-align: center;
  margin-bottom: 30px;
}

.page-header h1 {
  color: #2c3e50;
  margin-bottom: 10px;
}

.page-content {
  display: grid;
  gap: 30px;
}

.search-section {
  background: #f8f9fa;
  padding: 20px;
  border-radius: 8px;
}

.stats-section {
  background: #e8f4f8;
  padding: 20px;
  border-radius: 8px;
}

.export-section {
  background: #f0f8f0;
  padding: 20px;
  border-radius: 8px;
}

.projects-section {
  background: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
```

### **ProjectArchiveCard.css**
```css
.project-archive-card {
  background: white;
  border: 1px solid #e1e5e9;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  transition: box-shadow 0.3s ease;
}

.project-archive-card:hover {
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
}

.project-name {
  color: #2c3e50;
  margin: 0;
  font-size: 1.2em;
}

.grade-badge {
  padding: 4px 8px;
  border-radius: 4px;
  font-weight: bold;
  color: white;
}

.grade-a { background: #27ae60; }
.grade-b-plus { background: #2ecc71; }
.grade-b { background: #f39c12; }
.grade-c-plus { background: #e67e22; }
.grade-c { background: #e74c3c; }

.project-info {
  margin-bottom: 15px;
}

.info-item {
  display: flex;
  margin-bottom: 8px;
}

.info-item .label {
  font-weight: bold;
  width: 120px;
  color: #7f8c8d;
}

.info-item .value {
  color: #2c3e50;
}

.technology-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-bottom: 15px;
}

.tech-tag {
  background: #3498db;
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.9em;
}

.project-details {
  border-top: 1px solid #e1e5e9;
  padding-top: 15px;
  margin-top: 15px;
}

.description h5,
.keywords h5 {
  color: #2c3e50;
  margin-bottom: 8px;
}

.keyword-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}

.keyword-tag {
  background: #95a5a6;
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.9em;
}

.completion-info {
  margin-top: 15px;
  padding-top: 15px;
  border-top: 1px solid #e1e5e9;
}

.card-actions {
  text-align: center;
  margin-top: 15px;
}

.btn-details {
  background: #3498db;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.btn-details:hover {
  background: #2980b9;
}
```

---

## üìã ‡∏™‡∏£‡∏∏‡∏õ Frontend Components

### **‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å:**
- **ProjectArchivePage** - ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
- **ProjectSearchForm** - ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
- **ProjectArchiveList** - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß
- **ProjectArchiveCard** - ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ

### **üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:**
- **ProjectStatsPanel** - ‡πÅ‡∏ú‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
- **ExportButtons** - ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
- **Pagination** - ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤

### **üé® UI/UX:**
- Responsive design
- Loading states
- Error handling
- Interactive elements
- Modern styling

**Frontend Components ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!** üéØ

